Java：跨平台语言（Windows、MacOS、Linux）
JVM：跨语言平台（Java、Kotlin、Clojure、Groovy、Scala）
Java程序 -> 字节码文件 -> JVM解释运行
只要符合JVM规范的字节码，都可以运行

Java虚拟机与语言无关，并不会单纯地与Java语言终身绑定，只要其他编程语言的编译结果满足并包含虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。

多语言混合编程：
各种语言之间的交互不存在任何困难，就像使用自己语言的原生API一样方便，因为它们最终都运行在一个虚拟机之上
推动Java虚拟机从“Java语言的虚拟机”向“多语言虚拟机”的方向发展

虚拟机可以分为系统虚拟机、程序虚拟机
系统虚拟机：比如Visual Box、VMWare，它们完全是对物理计算机的仿真
程序虚拟机：专本伟执行单个计算机程序而设计
无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中

Java虚拟机：
1.Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码未必由Java序言编译而成
2.JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即使编译器
3.Java技术的核心就是Java虚拟机，因为所有的Java程序都运行在Java虚拟机内部

作用：
Java虚拟机就是二进制字节码的运行环境

特点：
1.一次编译，到处运行
2.自动内存管理
3.自动垃圾回收功能

JVM的位置：
JVM是运行在操作系统之上的，它与硬件没有直接的交互

JVM整体运行结构：
.class files -> 类加载子系统 -> 运行时数据区 -> 执行引擎
运行时数据区：方法区、堆、Java虚拟机栈、本地方法栈、程序计数器

方法区、堆，是线程共享的
Java虚拟机栈、本地方法栈、程序计数器是线程私有的
执行引擎：解释器、JIT编译器、垃圾回收器

Java代码执行流程：
Java源码 -> Java编译器（词法分析、语法分析、语义分析、字节码生成器） -> 字节码文件
字节码文件 -> JVM（类加载器、字节码校验器、执行（解释执行、编译执行））

JVM的架构模型：
Java编译器输入的指令流基本上是一种基于栈的指令集架构

基于栈式架构的特点：
1.设计和实现简单，适用于资源受限的系统
2.避开了寄存器的分配难题：使用零地址指令方式分配
3.指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈，指令集更小，编译器容易实现
4.不需要硬件支持，可移植性更好，更好实现跨平台

基于寄存器架构的特点：
1.典型的应用是x86的二级制指令，比如：传统的PC以及Android Davlik虚拟机
2.指令集架构则完全以来硬件，可移植性差
3.性能优秀，执行更高效
4.花费更少的指令去完成一项操作
5.基于寄存器的指令集往往都是以一地址指令、二地址指令和三地址指令为主

