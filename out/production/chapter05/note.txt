虚拟机栈：
处于跨平台的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。
有点是跨平台，指令集小，编译器容易实现。
缺点是性能下降，实现相同的功能需要更多的指令。

栈是运行时的单位，堆事存储的单位
栈解决程序的运行问题，即程序如何执行，如何处理数据。
堆解决的是数据存储问题，即数据怎么放，放在哪里。

Java虚拟机栈是什么？
Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。
每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的方法调用。
Java虚拟机栈是线程私有的。

生命周期：
与线程保持一致

作用：
主管Java程序的运行，它保存方法的局部变量（8种基本数据类型，对象的引用地址）、部分结果，并参与方法的调用和返回。

局部变量 vs 成员变量（属性，域）
基本数据类型变量 vs 引用类型变量

栈的特点：
1.栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器
2.JVM直接对栈的操作只有两个：
1）每个方法执行，伴随着进栈（入栈、压栈）
2）执行结束后的出栈工作
3.对于栈来说，不存在垃圾回收问题（但可能存在OOM问题）

栈中可能出现的异常：
Java虚拟机规范允许Java栈的大小是动态的或者是固定不变的
1.如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈的容量可以在线程创建的时候独立选定。
如果线程请求分配的栈容量超过了Java虚拟机栈允许的最大容量，那么Java虚拟机将会抛出StackOverflowError
2.如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存，那么Java虚拟机将会抛出OutOfMemoryError

设置栈内存大小：-Xss+size+单位（不写单位则为字节）
如：-Xss1m，-Xss1024k，-Xss10488576

栈中存储什么？
1.每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在的。
2.在这个线程上正在执行的每个方法都各自对赢一个栈帧（Stack Frame）。
3.栈帧是一个内存区块，是一个数据集，维系着方法执行过程的各种数据信息（操作数栈、局部变量表、返回地址、动态链接、附加信息）

栈运行原理：
1.JVM直接对栈的操作只有两个：入栈、出栈
2.在一条活动线程中，一个时间点上，只会有一个活动的栈帧，被称为当前栈帧（Current Frame），与之对应的是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）
3.执行引擎运行的所有字节码指令只针对当前栈帧进行操作
4.如果该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧
5.不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧
6.如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给当前栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧
7.Java方法有两种返回函数的方式：一种是正常返回，另一种是抛出异常。不管哪种方式，都会导致栈帧被弹出

栈帧的内部结构：
1.局部变量表（Local Variables）
2.操作数栈（Operand Stack）（或表达式栈）
3.动态链接（Dynamic Linking）（或指向运行时常量池的方法引用，多态的实现基于动态链接）
4.方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）
5.一些附加信息
以上结构决定了栈帧的大小
方法返回地址、动态链接、附加信息，也会被称为帧数据区

局部变量表：
1.局部变量表也被称之为局部变量数组或本地变量表
2.定义为一个数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括基本数据类型、对象引用，以及returnAddress类型。
3.由于局部变量表是建立在线程的栈上，是线程私有的，因此不存在数据安全问题。
4.局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的code属性的maximum local variables数据项中。
在方法运行期是不会改变局部变量表的大小的
5.方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用的次数越多。
对于一个方法而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大。
6.局部变量表中的变量只在当前方法调用中有效，当方法调用结束，随着方法栈帧的销毁，局部变量表也会随之销毁（这也说明了栈不涉及GC）

关于Slot的理解：
1.参数值的存放总是在局部变量表数组的index0开始，到数组长度-1的索引结束
2.局部变量表，最基本的存储单元是Slot（变量槽）
3.局部变量表中存放着编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量
4.在局部变量表里，32位以内的类型只占用一个Slot（包括returnAddress），64位的类型（long、double）占用两个Slot
byte、char、short在存储前被转换为int，boolean也会被转换为int，0为false，非0为true
5.JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值
6.当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照定义的顺序被复制到局部变量表中的每一个Slot上
7.如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可
8.如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的Slot处（这也解释了构造方法、实例方法中为什么可以访问this，而静态方法则不可以）

Slot的重复利用：
栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域诸侯声明的新的局部变量就很有可能复用过期局部变量的槽位，从而达到节省资源的目的

变量的分类：
1.按照数据类型：1）基本类型，2）引用类型
2.按照类中声明的位置来分：1）成员变量，2）局部变量

成员变量的分类：1）实例变量（Field），2）类变量（静态变量）

类变量在类加载的链接（准备）阶段会被赋零值，在初始化阶段会执行显式赋值和static代码块赋值
实例变量随着对象的创建，会在堆空间中分配实例变量的空间，并进行默认赋值
也说明了类变量。实例变量都有默认值，但局部变量没有默认值（在使用前必须显式赋值）

在栈帧中，与性能调优关系最为密切的部分就是局部变量表，在方法执行时，虚拟机使用局部变量表完成方法的传递
局部变量表中的变量也是重要的垃圾回收根节点（根可达算法），只要局部变量表中直接或间接引用的对象都不会被回收

操作数栈：
栈可以使用数组、链表实现。
操作数栈是基于数组实现的（先进后出，且有序）。
1.每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出的操作数栈，也可以称之为表达式栈
2.操作数栈，在方案执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈/出栈
3.主要用于保存计算过程的中间结果，同事作为计算过程中变量的临时存储空间
4.操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建，这个方法的操作数栈是空的（但其长度已经确定）
5.每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就确定，保存在方法的Code属性中，为max_stack
6.栈中的任何一个元素都可以是任意的Java数据类型
32bit的类型占用一个栈单位深度
64bit的类型占用两个栈单位深度
7.操作数栈并非用访问索引的方式来进行数据访问，而是只能通过入栈/出栈操作来完成一次数据访问
8.如果被调用的方法带有返回值，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令
9.操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证
10.Java虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈

栈顶缓存：
基于栈式架构的虚拟机完成一项操作需要使用更多的入栈/出栈操作，这意味着将需要更多的指令分派次数和内存读/写次数
频繁地执行内存读/写操作会影响执行速度
将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率

寄存器：指令更少，执行效率更高，但同时又依赖于CPU架构

动态链接（或指向运行时常量池的方法引用）：
1.每一个栈帧内部包含一个指向运行时常量池中该栈帧所属方法的引用。
包含这大哥引用的目的就是为了支持当前方法的代码能够实现动态链接。比如：invokedynamic指令
2.Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用保存在class文件的常量池中。
动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。

常量池与运行时常量池的区别：
常量池在字节码文件中
运行时常量池在方法区中

常量池的作用：
1.为了提供一些符号和常量，便于指令的识别
2.能够减少字节码文件的体积。

方法调用：
在JVM中，将符号引用转换为调用方法的直接引用于方法的绑定机制相关
静态链接：
当一个字节码文件被装载到JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变，这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。
动态链接：
如果被调用的方法在编译期无法被确定下来（只能在程序运行期将调用的符号引用转换为直接引用），由于这种引用转换过程具备动态性，因此也就被称之为动态链接。

对应的方法绑定机制为：早期绑定和晚期绑定。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。
早期绑定：
被调用的目标方法在编译期可知，且运行期保持不变，可将这个方法与所属的类进行绑定，因此也就可以使用静态链接的方式将符号引用转换为直接引用。
晚期绑定：
如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定的方式也就被称之为晚期绑定。

高级语言特性：继承、封装、多态
具有多态性，自然也就具备早期绑定和晚期绑定两种方式

Java中任何一个普通的方法都具备虚函数的特征，它们相当于C++语言中的虚函数。
如果在Java程序中不希望某个方法具备虚函数的特征，则使用final修饰

非虚方法：
1.如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的，这样的方法称为非虚方法
2.静态方法、自由方法、final方法、实例构造器、父类方法都是非虚方法
3.其他方法称为虚方法

子类对象多态的使用前提：
1.类的继承关系
2.方法的重写

虚拟机中提供了以下几条方法调用指令：
1.invokestatic：调用静态方法，解析阶段确定唯一方法版本
2.invokespecial：调用<init>方法、私有及父类方法，解析阶段确定唯一方法版本
3.invokevirtual：调用所有虚方法
4.invokeinterface：调用接口方法
5.invokedynamic：动态解析出需要调用的方法，然后执行（JDK7中新增，这是Java为了实现动态类型语言支持而做的一种改进）
前四条指令固化在虚拟机中，方法的调用执行不可人为干预，而invokedynamic指令则支持用户确定方法版本
其中invokestatic和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法
直到JDK1.8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式

动态类型语言和静态类型语言：
动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期
静态类型的语言是判断变量自身的类型信息，动态类型语言是判断变量值的类型信息
































