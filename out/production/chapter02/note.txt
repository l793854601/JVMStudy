类加载器子系统分为三个阶段：
1.加载阶段（引导类加载器、扩展类加载器、系统类加载器）
2.链接阶段（验证、准备、解析）
3.初始化阶段（初始化）

类加载器子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识（CA FE BA BE）
classloader只负责class文件的加载，至于是否可以运行，则由执行引擎决定
加载的类信息存放于一块称为方法区的内存空间，除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（常量池在运行时，加载到内存，就叫做运行时常量池）

class file加载到JVM中，被称为DNA元数据模板，放在方法区
在.class文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类加载器Class Loader）

加载阶段：
1.通过一个类的全限定名获取定义此类的二进制字节流
2.将这个字节流所代表的静态存储结构转化为方法区（永久代、元数据，具体看不通版本JDK的实现）的运行时数据结构
3.在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口

加载.class文件的方式：
1.从本地系统直接加载
2.从网络获取，场景：Web Applet
3.从zip压缩包中读取，成为日后jar、war格式的基础
4.运行时计算生成，场景：动态代理
5.从其他文件生成，场景：JSP应用
6.从转悠数据库中提取.class文件，比较少见
7.从加密文件中获取，典型的防class文件被反编译的措施

链接阶段：
1.验证：
目的在于确保class文件的字节流包含信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害虚拟机自身安全。
主要包括四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证
2.准备：
为类变量分配内存并且设置该类变量的默认初始值，即零值
这里不包含final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化
这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是随着对象一起被分配到Java堆中
3.解析：
将常量池内的符号引用转换为直接引用的过程（使用符号引用可以减少class文件的体积）
符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄
解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。

初始化：
1.初始化阶段就是执行类构造方法<clinit>()的过程
2.此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来
3.构造器方法中指令按语句在源文件中出现的顺序执行（static代码块与显示赋值都遵循先后顺序）
4.<clinit>()不同于类的构造器（JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕）
5.虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁

类加载器的分类：
JVM支持两种类型的类加载器，分别为引导类加载器（Bootstrap Classloader）和自定义加载器（User-Defined Classloader）
从概念上讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器
程序常见的类加载器只有3个：引导类加载器、扩展类加载器、系统类加载器（这几个加载器是包含关系，而不是继承关系）

虚拟机自带的加载器：
启动类加载器（引导类加载器，Bootstrap ClassLoader）
1.这歌类加载器是由C/C++语言实现的，嵌套在JVM内部
2.它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于替换JVM自身需要的类
3.并不继承自java.lang.ClassLoader，没有父加载器
4.加载扩展类加载器（ExtClassLoader）和应用程序类加载器（AppClassLoader），并指定为它们的父类加载器
5.出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类

扩展类加载器（Extension ClassLoader）
1.Java徐艳编写，由sun.misc.Launcher$ExtClassLoader实现
3.派生于ClassLoader类
3.父类加载器为启动类加载器
4.从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录jre/lib/ext子目录（扩展目录）下加载类库。如果用户创建的jar放在此目录下，也会自动由扩展类加载器加载。

应用程序类加载器（系统类加载器，AppClassLoader）
1.Java徐艳编写，由孙。miscLauncher￥AppClassLoader实现
2.派生于ClassLoader类
3.父类加载器为扩展类加载器
4.它负责环境变量classpath或系统属性java.class.path指定路径下的类库
5.该类加载器是程序中默认呃类加载器，一般来说，Java应用的类都是由它来完成加载的
6.通过ClassLoader.getSystemClassLoader()方法可以获取到该类加载器

用户自定义类加载器
在Java的日常应用程序中，类的加载几乎是由上述3类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式

为什么要自定义类加载器：
1.隔离加载类
2.修改类加载的方式
3.扩展加载源
4.防止源码泄漏

双亲委派机制：
Java虚拟机对class文件采用的是按需加载（懒汉式）的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。
加载某个类的class文件时，Java虚拟机采用的是双亲委派机制，即把请求交由父类处理，它是一种任务委派模式。

双亲委派工作原理：
1.如果一个类加载器收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类加载器去执行
2.如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器
3.如果父类加载器可以完成类加载器任务，就成功返回，如果父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式

优势：
1.避免类的重复加载
2.保护程序安全，防止核心API被随意篡改

沙箱安全机制：
在加载自定义String类的时候会率先使用引导类加载器，二引导类加载器再加载的过程中会先加载jdk自带的文件（java.lang.String）。
报错信息说没有main方法就是因为加载的是java.lang.String，这样可以保证对java核心源代码的保护，这就是沙箱安全机制

在JVM中表示两个class对象是否为同一个类存在两个必要条件：
1.类呃完整类名必须一致，包括包名
2.加载这两个类的ClassLoader必须相同

换句话说，在JVM中，即使这两个类对象来源同一个class文件，但只要加载它们的ClassLoader实例对象不同。那么这两个类对象也是不相等的。

JVM必须知道一个类是由启动类加载器加载的还是由用户类加载器加载的。
如果一个类是由用户类加载器加载的，那么JVM会将这歌类架子阿奇的一个引用作为类型信息的一部分保留在方法区中。
当解析一个类到另一个类的引用的时候，JVM需要保证这两个类的类加载器是相同的

Java程序对类的使用方式分为：主动使用和被动使用
主动使用分为7种情况：
1.创建类的实例
2.访问某个类或接口的静态变量，或者对该静态变量赋值
3.调用类的静态方法
4.反射，比如：Class.forName("com.tkm.java.Test")
5.初始化一个类的子类（父类肯定会被提前加载）
6.Java虚拟机启动时被标明为启动类的类
7.JDK7开始提供的动态语言支持
除了以上7种情况，其他使用Java类的方式都被看做是对类的被动使用，不会导致类的初始化

































