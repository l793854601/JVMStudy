堆的核心概念：
1.一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。
2.Java堆区在JVM祛痘的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间（堆内存的大小是可以调节的）。
3.JVM规范中规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。
4.所有的线程共享Java堆，这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。
5.JVM虚拟机规范中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。从实际的角度看，“几乎”所有的对象实例都在堆中分配。
6.数组和对象可能永远不会存储在栈上，因为栈帧中保留引用，这个引用指向对象或者数组在堆中的位置。
7.在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾回收的时候才会被移除。（GC时会STW，停止用户线程，因此不能频繁的GC）
8.堆，是GC执行垃圾回收的重点区域。

现代垃圾收集器大部分都基于分带收集理论设计，堆空间分为：
Java7及之前堆内存逻辑上分为三部分：新生区、养老区、永久区
Java8及之后堆内存逻辑上分为三部分：新生区、养老区、元空间
新生区=Eden区+S0区+S1区
约定：
新生区=新生代=年轻代
养老区=老年区=老年代
永久区=永久代

堆空间从逻辑上分为三个部分：新生区、养老区、永久区（元空间）
实际上堆空间不包含永久区（元空间）
永久区（元空间）被看成是方法区的具体落地实现

堆空间大小的设置：
1.Java堆区用于存储Java对象实例，那么堆的大小启动时就已经设定好了，可以通过-Xms、-Xmx设置。
1）-Xms用于表示堆区的起始内存，等价于-XX:InitialHeapSize。
2）-Xmx用于表示堆区的最大内存，等价于-XX:MaxHeapSize。
2.一旦堆区的内存大小超过-Xmx所指定的最大内存时，黄慧抛出OutOfMemoryError。
3.通过-Xms、-Xmx两个参数配置相同的值，其目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。
4.默认情况下，初始内存大小：物理电脑内存大小/64，最大内存大小：物理电脑内存大小/4。

年轻代和老年代：
存储在JVM中的Java对象可以被划分为两类：
1.生命周期较短的瞬时对象这类对象的创建和消亡都非常迅速
2.生命周期非常长，在某些极端的情况下还能够与JVM的生命周期保持一致
Java堆区进一步细分，可以划分为年轻代、老年代
其中年轻代又可以划分为Eden区、Survivor0区、Survivor1区（也称为from区、to区）

配置新生代与老年代在堆结构的占比：
默认：-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3
可以修改：-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1//5
在HotSpot中，Eden区和另外两个空间缺省所占的比例为8:1:1，可以使用-XX:SurvivorRatio调整这个比例
几乎所有的Java对象都是在Eden区被new出来的
绝大部分的Java对象的销毁都是在新生代进行了（有些大的对象在Eden区无法存储的时候，将直接进入老年代）
IBM公司的专门研究表明：新生代中80%的对象都是"朝夕生死"的
可以使用-Xmn设置新生代最大内存大小，但这个参数一般使用默认值就可以了

对象分配过程：
1.new的对象先放到Eden区，此区有大小限制。
2.当Eden区空间填满时，程序又需要创建对象，JVM的垃圾回收器将会对Eden区进行垃圾回收（Minor GC），
将Eden区中的不再被其他对象所引用的对象进行销毁。再加载新的对象到Eden区。
3.然后将Eden区剩余对象移动到S0区。
4.如果再次触发垃圾回收，此时上次幸存下来的放到S0区，如果没有回收，就会放到S1区（from区，to区不断交换的，谁空谁是to）。
5.如果再次经历垃圾回收，此时会重新放到S0区，接着再去S1区（S0、S1区数据是复制交换的，为了解决碎片问题）。
6.啥时候去养老区？可以设置次数，默认为15次（年龄计数，GC时，对象回收不掉，这个数就+1）。
-XX:MaxTenuringThreshold=N
7.在养老区，相对休闲。当养老区内存不足时，再次触发GC（Major GC），进行养老区的内存清理。
8.如果养老区执行了Major GC之后，依然无法进行对象的保存，就会产生OOM
java.lang.OutOfMemoryError: Java heap space

总结：
1.针对S0、S1区的总结：复制之后有交换，谁空谁是to
2.关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集
3.from、to区：from区是接受从Eden区回收不掉的对象

注意：Eden区满会主动触发Minor GC，Survivor区满了不会触发Minor GC，但Minor GC触发时，也会清理Survivor区

特殊情况：
1.new的对象，先看看Eden区是否放得下：
1）如果Eden放得下，则直接放到Eden区。
2）如果Eden放不下，则触发Minor GC，执行GC之后，看看还能不能放得下？
2.将对象放到老年区又有两种情况：
1）如果Eden区执行了Minor GC还是放不下对象，那说明是超大对象，只能直接放到老年代
2）如果老年代也放不下，则先触发FullGC，再看看能不能放得下，如果还放不下，则报OOM
3.如果Eden区满了，将对象往Survivor区拷贝时，发现Survivor区放不下，那只能将它们直接放入老年区

Minor GC、Major GC、Full GC：
Minor GC等价于Young GC（YGC）

1.垃圾回收会STW（Stop the World，停止用户线程），而Major GC和Full GC出现STW的时间，是Minor GC的10倍以上。
2.JVM在进行GC时，并非每次都对上面三个内存区域（新生代、老年代、永久代/元空间）一起回收的，大部分时候回收的都是指新生代。
针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型：1.部分收集（Partial GC）2.整堆收集（Full GC）
部分收集：不是完整收集整个Java堆的垃圾收集，其中又分为：
1）新生代收集（Minor GC/Young GC）：只是新生代的垃圾收集
2）老年代收集（Major GC/Old GC）：只是老年代的收集
目前，只有CMS GC会有单独收集老年代的行为
注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收
混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集（目前只有G1 GC会有这种行为）
整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集

Minor GC触发机制：
1.当年轻代（Eden区）空间不足时，就会出发Minor GC，这里的年轻代满指的是Eden区满，Survivor区满不会引发GC（每次Minor GC会清理Eden、Survivor的内存）。
2.因为Java对象大部分都具备朝生夕灭的特性，所以Minor GC非常频繁，一般速度也比较快。
3.Minor GC会引发STW，暂停其他用户线程，等垃圾回收结束，用户线程才能恢复运行。

Major GC/Full GC触发机制：
1.指发生在老年代的GC，对象从老年代消失时，我们说Major GC或Full GC发生了。
2.出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接机型Major GC的策略）。
也就是在老年代空间不足时，会先此昂是出发Minor GC。如果之后空间还不足，则触发Major GC。
3.Major GC的速度一般比Minor GC慢10倍以上，STW的时间更长。
4.如果Major GC后，内存还不足，就报OOM了。

Full GC触发机制：
1.调用System.gc()时，系统建议执行Full GC但不是必然执行的。
2.老年代空间不足。
3.方法区空间不足。
4.通过Minor GC后进入老年代的平均大小大于老年代的可用内存。
5.由Eden区、Survivor space0（From Space）区向Survivor space1（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象的大小




































