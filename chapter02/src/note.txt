类加载器子系统分为三个阶段：
1.加载阶段（引导类加载器、扩展类加载器、系统类加载器）
2.链接阶段（验证、准备、解析）
3.初始化阶段（初始化）

类加载器子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识（CA FE BA BE）
classloader只负责class文件的加载，至于是否可以运行，则由执行引擎决定
加载的类信息存放于一块称为方法区的内存空间，除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（常量池在运行时，加载到内存，就叫做运行时常量池）

class file加载到JVM中，被称为DNA元数据模板，放在方法区
在.class文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类加载器Class Loader）

加载阶段：
1.通过一个类的全限定名获取定义此类的二进制字节流
2.将这个字节流所代表的静态存储结构转化为方法区（永久代、元数据，具体看不通版本JDK的实现）的运行时数据结构
3.在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口

加载.class文件的方式：
1.从本地系统直接加载
2.从网络获取，场景：Web Applet
3.从zip压缩包中读取，成为日后jar、war格式的基础
4.运行时计算生成，场景：动态代理
5.从其他文件生成，场景：JSP应用
6.从转悠数据库中提取.class文件，比较少见
7.从加密文件中获取，典型的防class文件被反编译的措施

链接阶段：
1.验证：
目的在于确保class文件的字节流包含信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害虚拟机自身安全。
主要包括四种验证：文件格式验证、元数据验证、字节码验证、符号引用验证
2.准备：
为类变量分配内存并且设置该类变量的默认初始值，即零值
这里不包含final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化
这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是随着对象一起被分配到Java堆中
3.解析：
将常量池内的符号引用转换为直接引用的过程（使用符号引用可以减少class文件的体积）
符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄
解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。

初始化：
1.初始化阶段就是执行类构造方法<clinit>()的过程
2.此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来
3.构造器方法中指令按语句在源文件中出现的顺序执行（static代码块与显示赋值都遵循先后顺序）
4.<clinit>()不同于类的构造器（JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕）
5.虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁

类加载器的分类：
JVM支持两种类型的类加载器，分别为引导类加载器（Bootstrap Classloader）和自定义加载器（User-Defined Classloader）
从概念上讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器
程序常见的类加载器只有3个：引导类加载器、扩展类加载器、系统类加载器（这几个加载器是包含关系，而不是继承关系）








