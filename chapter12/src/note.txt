String的基本特性：
1.String：字符串，使用一对""引起来表示。
String a = "Hello World";
String b = new String("Hello World");
2.String类被final修饰，不能被继承。
3.String实现了Serializable接口、Comparable接口。
4.String在jdk8及以前内部定义了final char[] value用于存储字符串数据。jdk9时改为byte[]。

String存储结构变更：
结论：
String改为byte[]加上编码标记，节约了一些空间。
StringBuffer、StringBuilder也同样做了修改。

String：代表不可变的字符序列。简称：不可变性。
当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。
当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。
当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。

通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。

字符串常量池中是不会存储相同内容的字符串的。
1.String的String Pool是一个固定大小的HashTable，默认值大小长度是1009。
如果放进String Poll的String非常多，就会造成Hash冲突严重，从而导致链表很长，而链表长了后直接造成的影响就是调用String.intern()时性能大幅下降。
2.使用-XX:StringTableSize可设置StringTable的长度。
3.在jdk6中，StringTable是固定的，就是1009的长度，所以如果常量池中的字符串过多就会导致效率下降很快。StringTableSize设置没有要求。
4.在jdk7中，StringTable的长度默认值是60014，1009是可设置的最小值。

在Java语言中有8种基本数据类型和一种比较特殊的类型String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念。
常量池就类似一个Java系统级别提供的缓存。8种基本数据类型的常量池是系统协调的。String类型的常量池比较特殊，它的主要使用方法有两种：
1.直接使用双引号声明出来的String对象会直接存储在常量池中。（String s = "Hello World"）
2.如果不是用双引号声明的String对象，可以使用String提供的intern()方法（尝试放入常量池，如果常量池已存在，则不放入。最终会返回常量池中String对象）。

JDK6及以前，字符串常量池存放在永久代。
JDK7，字符串常量池在Java堆内。
所有的字符串都保存在堆中，和其他普通对象一样，这样可以让你在进行调优应用时，仅需调整堆大小就可以了。
字符串常量池概念原本使用的比较多，但是这个改动使得我们有足够的理由让我们重新考虑在JDK7中使用String.intern()。
JDK8，字符串常量池在堆。

StringTable为什么要调整位置？（从永久代调整到堆）
1.永久代PermSize默认比较小。
2.永久代垃圾回收频率低，不及时。

Java语言规范里要求：完全相同的字符串字面量，应高包含同样的Unicode字符序列（包含同一份码点序列的常量），并且必须是指向同一个String类实例。

字符串拼接操作：
1.常量与常量的拼接结果在常量池，原理是编译期优化。
2.常量池中不会存在相同内容的常量。
3.只要其中有一个是变量，结果就在堆中（非常量池）。变量拼接的原理是StringBuilder。
4.如果拼接的结果调用intern()方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象的地址（如果有，则直接返回此对象的地址）。

intern()的使用：
如果不是用双引号声明的String对象，可以使用String提供的intern方法。
intern方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。
String s = new String("hello").intern();

也就是说，如果在任意字符串上调用intern方法，那么其返回的结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同。
("a" + "b" + "c").intern() == "abc"; 返回结果必定是true。

通俗点讲：intern()就是确保字符串在内存中只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。
注意，这个值会被存放在字符串内部池（String Intern Pool）。

总结String.intern()的使用：
1.jdk1.6中：
1）如果串池中有，则并不会放入，返回已有的串池中的对象的地址。
2）如果没有，会把此对象赋值一份，放入串池，并返回串池中的对象地址。
2.jdk1.7起：
1）如果串池中有，则并不会放入，返回已有的串池中的对象的地址。
2）如果没有，则会把对象的引用地址复制一份，放入串池，并返回串池中的引用地址。








































