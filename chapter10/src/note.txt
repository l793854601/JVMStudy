直接内存概述：
1.不是虚拟机运行时数据区的一部分，也不是JVM规范中定义的内存区域。
2.直接内存是在Java堆外的、直接向操作系统申请的内存区域。
3.来源于NIO，通过在堆中的DirectByteBuffer操作Native内存。
4.通常，访问直接内存的速度会优于Java堆。即读写性能高（非阻塞式）。
1）因此，出于心梗考虑，读写频繁的场合可能会考虑使用直接内存。
2）Java的NIO库允许Java程序使用直接内存，用于数据缓冲区。
5.也可能操作OutOfMemory异常（Direct buffer memory）。
6.由于直接内存在Java堆外，因此它的大小不会直接受限于-Xmx指定的最大堆大小，但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存。

缺点：
1.分配回收成本较高。
2.不受JVM内存回收管理。

直接内存大小可以通过MaxDirectMemorySize设置。
如果不设置，默认与堆的最大值-Xmx参数值一致。

读写文件，需要与磁盘交互，需要由用户态切换到内核态。
使用IO，需要两份内存（用户态、内核态）存储重复数据，效率低。

简单理解：
Java process memory = Java heap + native memory











