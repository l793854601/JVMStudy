堆、栈、方法区的交互关系：
Person person = new Person();
其中：
1.Person类在方法区中。
2.person变量在Java虚拟机栈的局部变量表中。
3.new Person()对象在堆中。
4.在person对象中，有个指针指向方法区中的Person类型数据，表明这个person对象是用方法区中的Person类创建出来的。（对应的面试题：1.一个Object对象占用几个字节？2.为什么Android推荐使用@IntDef而不是枚举）

方法区在哪里？
JVM规范中明确说明：尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾手机或者进行压缩。
但对于HotSpotJVM而言，方法去还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。
所以，方法区看做是一块独立于Jaa堆的内存空间。
上一章节中提到过：堆的组成包含：年轻代、老年代、永久代（元空间）。其中永久代（元空间）本质上不属于堆，它是方法区的具体实现。

方法区的基本理解：
1.方法区与Java堆一样，是各个线程共享的内存区域。
2.方法区在JVM启动的时候被创建，并且它的实际物理内存空间中和Java堆区一样，都是可以不连续的。
3.方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。
4.方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出：
java.lang.OutOfMemoryError: PermGen space（JDK7及以前，永久代OOM）
java.lang.OutOfMemoryError: Metaspace（JDK8及以后，元空间OOM）
5.关闭JVM就会释放这个区域的内存。（也就是说，方法区的生命周期与JVM一致）

HotSpot中方法区的演进：
1.在JDK7及以前，习惯上把方法区，称为永久代。JDK8开始，使用元空间取代了永久代。
元空间使用本地内存（非JVM中的内存结构）。
2.本质上，方法区和永久代并不等价。仅是对HotSpot而言的。JVM规范对如何实现方法区，不做统一要求。
从现在看，当年使用永久代，不适好的idea。导致java程序更容易OOM（超过-XX:MaxPermSize上限，也就是永久代的OOM）
3.到了JDK8，终于完全废弃了永久代的概念，改用JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替。
4.元空间的本质和永久代类似，都是对JVM规范中方法去的实现。不过元空间与永久代最大的区别在于：元空间不在JVM设置的内存中，而是使用本地内存（更不容易出现OOM）。
5.永久代、元空间二者并不只是名字变了，内部结构也调整了。
6.根据JVM规范的规定：如果方法区无法满足新的内存分配需求时，将会抛出OOM异常。

设置方法区内存的大小：
1.方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。
2.JDK7及以前：
通过-XX:PermSize来设置永久代初始分配空间，默认值是20.75M
通过-XX:MaxPermSize来设置永久代最大可分配空间。32位机器默认是64M，64位机器默认是82M
当JVM加载的类信息容量超过这个值，就会报异常：java.lang.OutOfMemoryError: PermGen space
3.JDK8及以后：
元数据区大小可以使用-XX:MetaspaceSize和-XX:MaxMetaspaceSize指定，替代上述原有的两个参数。
默认值依赖于平台，Windows下，-XX:MetaspaceSize为21M，-XX:MaxMetaspaceSize为-1，即没有限制。
与永久代不同，如果不指定大小，默认清空下，虚拟机会耗尽所有的可用系统内存，如果元数据区发生溢出，虚拟机一样会抛出异常：java.lang.OutOfMemoryError: Metaspace。
4.建议将-XX:MetaspaceSize设置为一个相对较高的值。

方法区的内存结构：
主要存放类信息、运行时常量池、字符串常量池（不同JDK版本，字符串常量池存放的位置不同）
《深入理解Java虚拟机》书中对方法区存储内容描述如下：
它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。















