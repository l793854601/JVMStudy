堆、栈、方法区的交互关系：
Person person = new Person();
其中：
1.Person类在方法区中。
2.person变量在Java虚拟机栈的局部变量表中。
3.new Person()对象在堆中。
4.在person对象中，有个指针指向方法区中的Person类型数据，表明这个person对象是用方法区中的Person类创建出来的。（对应的面试题：1.一个Object对象占用几个字节？2.为什么Android推荐使用@IntDef而不是枚举）

方法区在哪里？
JVM规范中明确说明：尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾手机或者进行压缩。
但对于HotSpotJVM而言，方法去还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。
所以，方法区看做是一块独立于Jaa堆的内存空间。
上一章节中提到过：堆的组成包含：年轻代、老年代、永久代（元空间）。其中永久代（元空间）本质上不属于堆，它是方法区的具体实现。

方法区的基本理解：
1.方法区与Java堆一样，是各个线程共享的内存区域。
2.方法区在JVM启动的时候被创建，并且它的实际物理内存空间中和Java堆区一样，都是可以不连续的。
3.方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。
4.方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出：
java.lang.OutOfMemoryError: PermGen space（JDK7及以前，永久代OOM）
java.lang.OutOfMemoryError: Metaspace（JDK8及以后，元空间OOM）
5.关闭JVM就会释放这个区域的内存。（也就是说，方法区的生命周期与JVM一致）

HotSpot中方法区的演进：
1.在JDK7及以前，习惯上把方法区，称为永久代。JDK8开始，使用元空间取代了永久代。
元空间使用本地内存（非JVM中的内存结构）。
2.本质上，方法区和永久代并不等价。仅是对HotSpot而言的。JVM规范对如何实现方法区，不做统一要求。
从现在看，当年使用永久代，不适好的idea。导致java程序更容易OOM（超过-XX:MaxPermSize上限，也就是永久代的OOM）
3.到了JDK8，终于完全废弃了永久代的概念，改用JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替。
4.元空间的本质和永久代类似，都是对JVM规范中方法去的实现。不过元空间与永久代最大的区别在于：元空间不在JVM设置的内存中，而是使用本地内存（更不容易出现OOM）。
5.永久代、元空间二者并不只是名字变了，内部结构也调整了。
6.根据JVM规范的规定：如果方法区无法满足新的内存分配需求时，将会抛出OOM异常。

设置方法区内存的大小：
1.方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。
2.JDK7及以前：
通过-XX:PermSize来设置永久代初始分配空间，默认值是20.75M
通过-XX:MaxPermSize来设置永久代最大可分配空间。32位机器默认是64M，64位机器默认是82M
当JVM加载的类信息容量超过这个值，就会报异常：java.lang.OutOfMemoryError: PermGen space
3.JDK8及以后：
元数据区大小可以使用-XX:MetaspaceSize和-XX:MaxMetaspaceSize指定，替代上述原有的两个参数。
默认值依赖于平台，Windows下，-XX:MetaspaceSize为21M，-XX:MaxMetaspaceSize为-1，即没有限制。
与永久代不同，如果不指定大小，默认清空下，虚拟机会耗尽所有的可用系统内存，如果元数据区发生溢出，虚拟机一样会抛出异常：java.lang.OutOfMemoryError: Metaspace。
4.建议将-XX:MetaspaceSize设置为一个相对较高的值。

方法区的内存结构：
主要存放类信息、运行时常量池、字符串常量池（不同JDK版本，字符串常量池存放的位置不同）
《深入理解Java虚拟机》书中对方法区存储内容描述如下：
它用于存储已被虚拟机加载的类型信息、常量（运行时常量池）、静态变量、即时编译器编译后的代码缓存等。

类型信息：
对每个加载的类型（类Class、接口Interface、枚举Enum、注解Annotation），JVM必须在方法区中存储一下类型信息：
1.这个类型的完整有效名称（全名，即包名+类名）
2.这个类型直接父类的完整有效名（对于Interface或者是java.lang.Object，都没有父类）
3.这个类型的修饰符（public、abstract、final的某个子集）
4.这个类型直接接口的一个有序列表

域（Field）信息：
1.JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。
2.域的相关信息包括：域名称、域类型、域修饰符（public、private、protected、static、final、volatile、transient的某个子集）

方法（Method）信息：
JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序。
1.方法名称
2.方法的返回类型（或void）
3.方法参数的数量和类型（按顺序）
4.方法的修饰符（public、private、protected、static、final、synchronized、native、abstract的某个子集）
5.方法的字节码（bytecodes）、操作数栈、局部变量表大小（abstract和native方法除外）
6.异常表（abstract和native方法除外）
每个异常处理的开始位置、结束位置、代码处理在程序计数器中的变异地址、被捕获的异常类的常量池索引

non-final的类变量：
1.静态变量和类关联在一起，随着类的加载而加载，它们成为类数据在逻辑上的一部分。
2.类变量呗类的所有实例共享，即使没有类实例（对象）时你也可以访问它。

全局常量：static final
被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配（区别于non-final，non-final是随着类的加载而加载的，也就是说在运行期加载的）

运行时常量池VS常量池
1.方法区，内部包含了运行时常量池。
2.字节码文件，内部包含了常量池。
3.要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区。
4.要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中国的常量池。

一个有效的字节码文件中除了包含类的魔数、版本信息、字段、方法以及接口等描述信息外，还包含了一项信息，那就是常量池表（Constant Pool Table），
包括各种字面量和对类型、域和方法的符号引用。

为什么需要常量池：
一个Java源文件中的类、接口，编译后产生一个字节码文件，而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码中，
换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池。

常量池中有什么：
几种在常量池内存储的数据类型包括：
1.数量值
2.字符串值
3.类引用
4.字段引用
5.方法引用

小结：
常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息。

运行时常量池：
1.运行时常量池（Runtime Constant Pool）是方法区的一部分。
2.常量池表（Constant Pool Table）是Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，
这部分内容将在类加载后存放到方法区的运行时常量池中。
3.运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。
4.JVM为每个已加载的类型（类或接口）都维护一个常量池。翅中的数据项像数组项一样，是通过索引访问的。
5.运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能获得的方法或者字段引用。
此时不再是常量池中的符号地址了，这里换为真实地址。
运行时常量池，相当于Class文件常量池的另一重要特征是：具备动态性。
6.运行时常量池类似于传统编程语言中国的符号表（Symbol Table），但是它所包含的数据却比符号表要更加丰富一些。
7.当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OOM异常。

方法区的演进细节：
1.首先明确：只有HotSpot VM才有永久代。BEA JRockit IBM J9等来说，不存在永久代概念。
2.HotSpot VM中方法区的变化：
JDK1.6及之前：有永久代，静态变量存放在永久代上。
JDK1.7：有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中。
JDK1.8及以后：无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆

永久代为什么要被元空间替换：
1.随着Java8的到来，HotSpot VM中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。
这些数据被移到了一个与堆不相连的本息内存区域，这个区域叫做元空间（Metaspace）。
2.由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。
3.这项改动是很有必要的，因为：
1）为永久代设置空间大小是很难确定的。在某些场景下，如果动态记载类过多，容易产生Perm区的OOM。
而元空间和永久代之间最大区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认清下，元空间的大小仅受本地内存限制。
2）对永久代进行调优是很困难的（这里的调优指的是要避免频繁触发Full GC，永久代触发的Full GC非常耗时）。

StringTable为什么要调整：
JDK7中奖StringTable放到了堆空间中。因为永久代的回收效率很低，在Full GC的时候才会触发。
而Full GC时老年代的空间不足、永久代不足时才会触发的。这就导致了StringTable回收效率不高。
而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能即使回收内存。

方法区的垃圾回收：
JVM规范中对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。
一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时确实是必要的。
方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。

方法区内常量池中主要存放的两大类常量：字面量和符号引用。
字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。
而符号引用则属于编译原理方面的概念，包括下面三类常量：
1.类和接口的全限定名
2.字段的名称和描述符
3.方法的名称和描述符
HotSpot VM对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。
回收废弃常量与回收Java堆中的对象非常类似。

要想判定一个类型是否属于"不再被使用的类"的条件就比较苛刻了，需要同时满足下面三个条件：
1.该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。
2.加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。
3.该类对应的java.lang.Class对象没有在任何地方被引用，无法再任何地方通过反射访问该类的方法。
JVM被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是"被允许"，而并不是和对象一样，没有了引用就必然会回收。
通常都需要JVM具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。

常见面试题：
百度：
三面：说一下JVM内存模型，有哪些区，分别是干什么的？

蚂蚁金服：
Java8的内存分代改进？
JVM内存分为哪几个区？每个区的作用是什么？
一面：JVM内存分布/内存结构？栈和堆的区别？堆的结构？为什么要两个Survivor区（复制算法）？
二面：Eden区和Survivor区的比例分配？

小米：
JVM内存分区，为什么要有新生代和老年代？

字节跳动：
二面：Java的内存分区？
二面：讲讲JVM运行时数据区？
什么时候对象会进入老年代？

京东：
JVM的内存结构，Eden和Survivor的比例？
JVM内存（堆）为什么要分成新生代、老年代、持久代（永久代）？新生代为什么要分Eden和Survivor？

天猫：
一面：JVM内存模型以及分区，需要详细到每个区放什么。
二面：JVM内存模型，Java8做了什么修改？

拼多多：
JVM内存分为哪几个区？每个区的作用是什么？

美团：
Java内存分配
JVM的永久代中会发生垃圾回收吗？
一面：JVM内存分区，为什么要有新生代和老年代？
















