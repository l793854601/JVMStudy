虚拟机栈：
处于跨平台的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。
有点是跨平台，指令集小，编译器容易实现。
缺点是性能下降，实现相同的功能需要更多的指令。

栈是运行时的单位，堆事存储的单位
栈解决程序的运行问题，即程序如何执行，如何处理数据。
堆解决的是数据存储问题，即数据怎么放，放在哪里。

Java虚拟机栈是什么？
Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。
每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的方法调用。
Java虚拟机栈是线程私有的。

生命周期：
与线程保持一致

作用：
主管Java程序的运行，它保存方法的局部变量（8种基本数据类型，对象的引用地址）、部分结果，并参与方法的调用和返回。

局部变量 vs 成员变量（属性，域）
基本数据类型变量 vs 引用类型变量

栈的特点：
1.栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器
2.JVM直接对栈的操作只有两个：
1）每个方法执行，伴随着进栈（入栈、压栈）
2）执行结束后的出栈工作
3.对于栈来说，不存在垃圾回收问题（但可能存在OOM问题）

栈中可能出现的异常：
Java虚拟机规范允许Java栈的大小是动态的或者是固定不变的
1.如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈的容量可以在线程创建的时候独立选定。
如果线程请求分配的栈容量超过了Java虚拟机栈允许的最大容量，那么Java虚拟机将会抛出StackOverflowError
2.如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存，那么Java虚拟机将会抛出OutOfMemoryError

设置栈内存大小：-Xss+size+单位（不写单位则为字节）
如：-Xss1m，-Xss1024k，-Xss10488576

栈中存储什么？
1.每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在的。
2.在这个线程上正在执行的每个方法都各自对赢一个栈帧（Stack Frame）。
3.栈帧是一个内存区块，是一个数据集，维系着方法执行过程的各种数据信息（操作数栈、局部变量表、返回地址、动态链接、附加信息）

栈运行原理：
1.JVM直接对栈的操作只有两个：入栈、出栈
2.在一条活动线程中，一个时间点上，只会有一个活动的栈帧，被称为当前栈帧（Current Frame），与之对应的是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）
3.执行引擎运行的所有字节码指令只针对当前栈帧进行操作
4.如果该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧
5.不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧
6.如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给当前栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧
7.Java方法有两种返回函数的方式：一种是正常返回，另一种是抛出异常。不管哪种方式，都会导致栈帧被弹出

栈帧的内部结构：
1.局部变量表（Local Variables）
2.操作数栈（Operand Stack）（或表达式栈）
3.动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）
4.方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）
5.一些附加信息













